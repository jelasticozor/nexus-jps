type: install
version: 0.2
id: nexus
name: Nexus Repository Manager
baseUrl: https://raw.githubusercontent.com/jelasticozor/nexus-jps/master/
logo: images/Nexus.png
homepage: https://www.sonatype.com/products/repository-oss
description: Nexus Repository OSS is an open source repository that supports many
  artifact formats, including Docker, Java and npm. With the Nexus tool integration,
  pipelines in your toolchain can publish and retrieve versioned apps and their dependencies
  by using central repositories that are accessible from other environments.

categories:
- apps/dev-tools
- apps/dev-and-admin-tools

settings:
  fields:
  - type: spacer
    caption: Docker
  - name: dockerGroupListeningPort
    caption: Group Listening Port
    type: string
    default: 8443
  - name: dockerGroupConnectorPort
    caption: Group Connector Port
    type: string
    default: 8082
  - name: dockerHostedListeningPort
    caption: Group Listening Port
    type: string
    default: 18443
  - name: dockerHostedConnectorPort
    caption: Group Connector Port
    type: string
    default: 8083
  - type: spacer
    caption: SSL
  - name: useDefaultExternalDomain
    type: toggle
    caption: Use Default External Domain
    value: true
    hidden: false
    showIf:
      false:
      - name: externalDomains
        caption: External domain names (;-separated list)
        type: string
        vtype: domainlist
        required: true

ssl: false
nodes:
- nodeType: nginx-dockerized
  nodeGroup: bl
  count: 1
  fixedCloudlets: 1
  cloudlets: 4
- cloudlets: 32
  fixedCloudlets: 1
  nodeType: nginxphp

onInstall:
- compute-optional-params
- install-nexus
- setup-nginx
- installAddon:
    id: update-nexus
    nodeGroup: cp
- installAddon:
    id: letsencrypt
    settings:
      externalDomains: ${globals.EXTERNAL_DOMAINS}
- disable-script-endpoint
- setup-docker-access
- setup-firewall-for-docker
- close-from-outside-world:
    nodeGroup: cp
    relatedNodeGroup: bl
- auto-redirect-to-https

actions:
  install-nexus:
  - cmd[cp]: |-
      wget -P /etc/yum.repos.d/ https://repo.sonatype.com/repository/community-hosted/rpm/sonatype-community.repo &>> /var/log/run.log
      yum -y update &>> /var/log/run.log
      yum -y install nexus-repository-manager &>> /var/log/run.log
      echo /opt/sonatype/ >> /etc/jelastic/redeploy.conf
      sleep 10
      wget ${baseUrl}/conf/nexus.properties -O /opt/sonatype/sonatype-work/nexus3/etc/nexus.properties 
      chmod 664 /opt/sonatype/sonatype-work/nexus3/etc/nexus.properties
      usermod -a -G nexus3 jelastic
    user: root
    sayYes: true
  setup-nginx:
  - cmd[cp]: |-
      sed -i 's|index  index.html index.htm index.php;|index  index.html index.htm index.php;\n\n    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;|g' /etc/nginx/conf.d/sites-enabled/default.conf
      sed -i 's|index  index.html index.htm index.php;|index  index.html index.htm index.php;\n\n    proxy_set_header X-Real-IP $remote_addr;|g' /etc/nginx/conf.d/sites-enabled/default.conf
      sed -i 's|index  index.html index.htm index.php;|index  index.html index.htm index.php;\n\n    proxy_set_header Host $host;|g' /etc/nginx/conf.d/sites-enabled/default.conf
      sed -i 's|index  index.html index.htm index.php;|index  index.html index.htm index.php;\n\n    proxy_pass http://localhost:8081/;|g' /etc/nginx/conf.d/sites-enabled/default.conf
    user: root
    sayYes: true
  - replaceInFile:
      nodeType: nginxphp
      path: "/opt/sonatype/sonatype-work/nexus3/etc/nexus.properties"
      replacements:
      - pattern: "# application-host=0.0.0.0"
        replacement: application-host=127.0.0.1
  - api [cp]: jelastic.environment.control.RestartNodes
  - cmd [cp]: sleep 15
  compute-optional-params:
    - script: |
        return {
          result: 0,
          externalDomains: ${settings.useDefaultExternalDomain} ? "${env.domain}" : "${settings.externalDomains}",
        };
    - setGlobals:
        EXTERNAL_DOMAINS: ${response.externalDomains}
  disable-script-endpoint:
    - cmd[bl]: wget ${baseUrl}/conf/nginx/disable_scripts_endpoint.locations -O /etc/nginx/conf.d/scripts_endpoint.locations
    - restartContainers[bl]
  setup-docker-access:
    - setup-docker-conf:
        confName: docker-group
        listeningPort: ${settings.dockerGroupListeningPort}
        connectorPort: ${settings.dockerGroupConnectorPort}
    - setup-docker-conf:
        confName: docker-hosted
        listeningPort: ${settings.dockerHostedListeningPort}
        connectorPort: ${settings.dockerHostedConnectorPort}
    - restartContainers[bl]
  setup-docker-conf:
    - cmd[bl]: wget ${baseUrl}/conf/nginx/docker.conf -O /etc/nginx/conf.d/${this.confName}.conf
    - api:
        - method: environment.file.ReplaceInBody
          params:
            nodeGroup: bl
            path: /etc/nginx/conf.d/${this.confName}.conf
            pattern: LISTENING_PORT
            replacement: ${this.listeningPort}
        - method: environment.file.ReplaceInBody
          params:
            nodeGroup: bl
            path: /etc/nginx/conf.d/${this.confName}.conf
            pattern: IP
            replacement: ${nodes.cp.master.intIP}
        - method: environment.file.ReplaceInBody
          params:
            nodeGroup: bl
            path: /etc/nginx/conf.d/${this.confName}.conf
            pattern: CONNECTOR_PORT
            replacement: ${this.connectorPort}
  setup-firewall-for-docker:
    - api:
        - method: environment.security.AddRules
          params:
            nodeGroup: bl
            rules:
              - action: ALLOW
                direction: INPUT
                name: docker-group
                ports: ${settings.dockerGroupListeningPort}
                protocol: TCP
              - action: ALLOW
                direction: INPUT
                name: docker-hosted
                ports: ${settings.dockerHostedListeningPort}
                protocol: TCP
        - method: environment.security.AddRules
          params:
            nodeGroup: cp
            rules:
              - action: ALLOW
                direction: INPUT
                name: docker-group
                ports: ${settings.dockerGroupConnectorPort}
                protocol: TCP
                relatedNodeGroup: bl
              - action: ALLOW
                direction: INPUT
                name: docker-hosted
                ports: ${settings.dockerHostedConnectorPort}
                protocol: TCP
                relatedNodeGroup: bl
  close-from-outside-world:
    script: https://raw.githubusercontent.com/jelasticozor/jelastic-common/master/security/closeNodeGroupFromOutsideWorld.js
    nodeGroup: ${this.nodeGroup}
    relatedNodeGroup: ${this.relatedNodeGroup}
  auto-redirect-to-https:
    - cmd[bl]: wget ${baseUrl}/conf/nginx/ssl.conf -O /etc/nginx/conf.d/ssl.conf
    - cmd[bl]:
        - sed -i '/#GFADMIN/,/TCP\ SECTION\ PROTOTYPE/d' /etc/nginx/nginx-jelastic.conf
        - wget ${baseUrl}/conf/nginx/https_redirection.conf -O /tmp/https_redirection.conf
        - cat /tmp/https_redirection.conf >> /etc/nginx/nginx-jelastic.conf
      user: root
    - restartContainers[bl]

addons:
- id: update-nexus
  name: Update Nexus Repository Manager
  description: Update of Nexus and CentOS
  buttons:
  - caption: Update
    action: update
    loadingText: Updating...
    confirmText: Do you want to update Nexus and CentOS?
    successText: Nexus and CentOS have been successfully updated!
  actions:
    update:
    - log: launching nexus update JPS
    - install: https://raw.githubusercontent.com/jelastic-jps/nexus/master/scripts/update-nexus.jps
      skipEmail: true
- id: letsencrypt
  name: letsencrypt
  onInstall:
  - install:
      envName: ${env.envName}
      nodeGroup: bl
      jps: https://raw.githubusercontent.com/jelastic-jps/lets-encrypt/blob/master/manifest.jps
      settings:
        customDomains: ${settings.externalDomains}

success: text/success-email.md
